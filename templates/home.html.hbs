<!DOCTYPE html>
<html>
<head>
    <title>Home</title>
</head>
<body class="bg-dark">
    {{>partials/navbar}}
   <div class="container">
        {{!-- games will be here --}}
        <div class="card bg-dark">
            <div class="text-center text-light">
                <div class="text-center"><h1>Games</h1></div>
                <div class="row">
                    <p class="lead text-center">Please select a game you would like to play</p>
                    <div class="game-selection text-center col-12">
                        <ul  style="list-style: none">
                            <li><button class="game-button btn btn-primary bg-lg col-5 m-3 p-2" style="background-color: rgb(197, 0, 21);" data-game="pong">Pong</button></li>
                            <li><button class="game-button btn btn-primary bg-lg col-5 m-3 p-2" style="background-color: rgb(42, 122, 162);" data-game="breakout">Breakout</button></li>
                        </ul>
                    </div>
                </div>
            </div>
            <div class="card-body bg-dark">
                {{!-- here you will render the compiled rust code that will run on the browser the game --}}
                <div class="row" id="gameOne">
                    <div class="col-12 d-flex justify-content-center align-items-center" style="height: 50vh;">
                        <canvas id="pongCanvas" width="700" height="500" style="background-color: rgb(216, 230, 232);"></canvas>
                    </div>
                </div>
            </div>
            <div class="card-footer">
                
            </div>
            

        </div>
   </div>
    <script type="module">

        // Breakout game logic
        class BreakoutGame {
            constructor(canvas, mouseX){
                this.canvas = canvas;
                this.ctx = canvas.getContext("2d");
                this.paddle = new Paddle(canvas);
                this.ball = new Ball(canvas);
                this.numberBricks = 50;
                this.gameEnded = false;
                this.numberLives = 3;
                this.colors = ["rgb(204, 77, 80)"];

                // Create the bricks in a single array
                this.bricks = [];

                // init random value in the range of the length of the colors array
                this.makesBricks(this.colors);
                
                
                this.mouseX = canvas.width / 2;
                canvas.addEventListener("mousemove", this.handleMouseMove.bind(this));

            }
             

            handleMouseMove(event){
                this.mouseX = event.clientX - this.canvas.getBoundingClientRect().left;
            }

            gameOverMsg(){
                this.ctx.font = "30px Arial";
                this.ctx.fillStyle = "black";
                this.ctx.fillText("Game Over", this.canvas.width / 2 - 50, this.canvas.height / 2);
                        
            }

            makesBricks(colors){
                for (let i = 0; i < this.numberBricks; i++) {
                    // Calculate the brick's x and y position based on its index
                    const brickX = (i % 6) * 100;
                    const brickY = Math.floor(i / 6) * 20;
                    const positionX = brickX + 10;
                    const positionY = brickY + 10;

                    // Get a random color from the colors array
                    // make a new seed for the random number generator each time
                    const randomColor = Math.floor(Math.random() * colors.length);
                    const r = colors[randomColor];
                    this.bricks.push(new Brick(this.canvas, positionX, positionY, r)); // Pass canvas and other parameters here
                }
            }

            resetBricksArray(){
                // clear the bricks array
                this.bricks = [];
                // init random value in the range of the length of the colors array
                this.makesBricks(this.colors);
            }

            drawRestartButton(){
                // if game ended is true and the number of lives is greater than 0
                // draw the restart button to the middle of the screen
                if(this.gameEnded && this.numberLives > 0){
                    const restartButton = document.createElement("restart-button");
                    restartButton.innerText = "Restart";
                    document.body.appendChild(restartButton);
                    // put the button in the middle of the screen
                    restartButton.style.position = "absolute";
                    restartButton.style.top = "40%";
                    restartButton.style.left = "50%";
                    restartButton.style.transform = "translate(-50%, -50%)";
                    restartButton.className = "btn btn-primary btn-lg";
                    restartButton.addEventListener("click", () => {
                        this.resetGame();
                        restartButton.remove();
                        console.log("restart");
                    });
                }
            }

            removeRestartButton(){
                const restartButton = document.querySelector("restart-button");
                if(restartButton){
                    restartButton.remove();
                }
            }


            update(){

                if(this.gameEnded){  
                    if(this.numberLives === 0){
                       this.gameOverMsg();
                        return;
                    }
                }

                this.ball.update(this.ctx); // update the ball
                // update the paddle with the mouseX position
                this.paddle.update(this.mouseX);
                
                // check for collision with the bottom wall 
                if (this.ball.y + this.ball.radius >= this.canvas.height) {
                    this.numberLives--;
                    console.log("collision with bottom wall");
                    this.gameEnded = true;
                }
                
                // Check for collision with the paddle
                if (
                    this.ball.y + this.ball.radius >= this.paddle.y &&
                    this.ball.y - this.ball.radius <= this.paddle.y + this.paddle.height &&
                    this.ball.x + this.ball.radius >= this.paddle.x &&
                    this.ball.x - this.ball.radius <= this.paddle.x + this.paddle.width
                ) {
                    // Collision with the paddle
                    // Reverse the ball's y-direction to bounce it off the paddle
                    this.ball.dy = -this.ball.dy;
                }

                // Iterate through the bricks and check for collision with the ball
                for (let i = 0; i < this.bricks.length; i++) {
                    const brick = this.bricks[i];

                    // Check for collision with the ball
                    if (
                        this.ball.x + this.ball.radius > brick.x &&
                        this.ball.x - this.ball.radius < brick.x + brick.width &&
                        this.ball.y + this.ball.radius > brick.y &&
                        this.ball.y - this.ball.radius < brick.y + brick.height
                    ) {
                        // Collision with a brick
                        this.ball.dy = -this.ball.dy; // Reverse the ball's y-direction
                        this.bricks.splice(i, 1); // Remove the brick from the array
                    }
                }
            }

            draw(){
                // clear canvas
                this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);

                // draw the game elements
                this.ball.draw(this.ctx);
                this.paddle.draw(this.ctx);
                this.bricks.forEach((brick) => {
                    brick.draw(this.ctx);
                });

                // draw the number of lives to the top left corner of the screen
                this.ctx.font = "30px Arial";
                this.ctx.fillStyle = "black";
                this.ctx.fillText("Lives: " + this.numberLives, 10, 30);

                if(this.gameEnded){
                    this.drawRestartButton();
                }else{
                    this.removeRestartButton();
                }
            }
            
            resetGame(){
                this.ball.reset();
                this.paddle.reset();
                this.resetBricksArray();
                this.gameEnded = false;
                this.numberLives = 3;
            }
            // game loop to setup the update, draw, and requestAnimationFrame
            gameLoop(){
                this.update();
                this.draw();
                requestAnimationFrame(this.gameLoop.bind(this));
            }
        }


        // Ball class
        class Ball {
            constructor(canvas){
                this.canvas = canvas;
                this.x = 200;
                this.y = 200;
                this.dx = 5;
                this.dy = -5;
                this.radius = 10;
                this.LEFT_BOUNDARY = 0;
                this.RIGHT_BOUNDARY = canvas.width;
                this.TOP_BOUNDARY = 0;
                this.BOTTOM_BOUNDARY = canvas.height;
            }

            update(){
                // Move the ball
                this.x += this.dx;
                this.y += this.dy;

                // Check for collision with the walls and reverse the direction of the ball
                if (this.x + this.radius >= this.RIGHT_BOUNDARY || this.x - this.radius <= this.LEFT_BOUNDARY) {
                    this.dx = -this.dx;
                }

                // Check for collision with the top wall
                if (this.y - this.radius <= this.TOP_BOUNDARY) {
                    this.dy = -this.dy;
                }

                // Check for collision with the bottom wall
                if (this.y + this.radius >= this.BOTTOM_BOUNDARY) {
                    this.dy = 0;
                    this.dx = 0;
                }

            }

            draw(ctx){
                ctx.beginPath();
                ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2);
                ctx.fillStyle = "black";
                ctx.fill();
                ctx.closePath();
            }

            reset(){
                this.x = this.canvas.width / 2;
                this.y = this.canvas.height / 2;
                this.dx = 5;
                this.dy = -5;
            }
        }

        // Paddle class

        class Paddle {
            constructor(canvas){
                this.canvas = canvas;
                this.width = 100;
                this.height = 20;
                this.x = canvas.width / 2 - this.width / 2;
                this.y = canvas.height - this.height - 10;
                this.dx = 5;
                this.dy = 0;
            }

            update(mouseX){
                // move the paddle
                this.x = mouseX - this.width / 2;
                // ensure the paddle does not go off the screen
                if(this.x < 0){
                    this.x = 0;
                }else if(this.x + this.width > this.canvas.width){
                    this.x = this.canvas.width - this.width;
                }
            }

            draw(ctx){
                ctx.beginPath();
                ctx.rect(this.x, this.y, this.width, this.height);
                ctx.fillStyle = "black";
                ctx.fill();
                ctx.closePath();
            }

            reset(){
                this.x = this.canvas.width / 2 - this.width / 2;
                this.y = this.canvas.height - this.height - 10;
                this.dx = 5;
                this.dy = 0;
            }
        }

        // Brick class

        class Brick {
            constructor(canvas, x, y, color){
                this.canvas = canvas;
                this.width = 100;
                this.height = 20;
                this.color = color;
                this.x = x;
                this.y = y;
                this.dx = 5;
                this.dy = 5;
            }

            update(ctx){}

            draw(ctx){
                ctx.beginPath();
                ctx.rect(this.x, this.y, this.width, this.height);
                ctx.strokeStyle = "white";
                ctx.fillStyle = this.color;
                ctx.stroke();
                ctx.fill();
                ctx.closePath();
            }

            reset(){
                this.x = x;
                this.y = y;
                this.dx = 5;
                this.dy = 5;
            }

        }



        // Class based logic
        class PongGame {
            constructor(canvas){
                this.canvas = canvas;
                this.ctx = canvas.getContext("2d");
                this.score = 0;
                this.gameEnded = false;
                this.playButton = this.drawPlayButton();
                this.playButton.addEventListener("click", () => {
                  
                    this.play();
                    // change the canvas background color
                    this.canvas.style.backgroundColor = "rgb(130, 192, 201)";
                    // remove the play button from the DOM after the game has started
                    this.playButton.remove();
                });
               

                // init ball properties
                this.ballX = this.canvas.width / 2;
                this.ballY = this.canvas.height / 2;
                this.ballSpeedX = 0;
                this.ballSpeedY = 0;


                // init paddle properties

                this.paddleWidth = 10;
                this.paddleHeight = 100;
                this.leftPaddleY = this.canvas.height / 2 - this.paddleHeight / 2;
                this.rightPaddleY = this.canvas.height / 2 - this.paddleHeight / 2;

                // set up mouse movement listener
                this.canvas.addEventListener("mousemove", this.handleMouseMove.bind(this));

                this.update();

            }

            // draw start button
            drawPlayButton(){
                // make a button to start the game by setting the ball speed to 5
                const playButton = document.createElement("button");
                playButton.innerText = "Play";
                document.body.appendChild(playButton);
                // put the button in the middle of the screen
                playButton.style.position = "absolute";
                playButton.style.top = "40%";
                playButton.style.left = "50%";
                playButton.style.transform = "translate(-50%, -50%)";
                playButton.className = "btn btn-primary btn-lg";
                return playButton;
            }

            // start game

            play(){
                // start the game
                this.ballSpeedX = 3;
                this.ballSpeedY = 3;
                this.ballX = this.canvas.width / 2;
                this.ballY = this.canvas.height / 2;
                this.score = 0;
                this.gameEnded = false;
            }

            //handle mouse move
            handleMouseMove(event){
                // Get the mouse position
                const rect = this.canvas.getBoundingClientRect();
                const root = document.documentElement;
                const mouseY = event.clientY - rect.top - root.scrollTop;

                // Move both paddles
                this.leftPaddleY = mouseY - this.paddleHeight / 2;
                this.rightPaddleY = mouseY - this.paddleHeight / 2;

                // Prevent the paddles from moving off the screen
                if (this.leftPaddleY < 0) {
                    this.leftPaddleY = 0;
                }

                if (this.leftPaddleY > this.canvas.height - this.paddleHeight) {
                    this.leftPaddleY = this.canvas.height - this.paddleHeight;
                }

                if (this.rightPaddleY < 0) {
                    this.rightPaddleY = 0;
                }

                if (this.rightPaddleY > this.canvas.height - this.paddleHeight) {
                    this.rightPaddleY = this.canvas.height - this.paddleHeight;
                }
            }

            // draw walls 
            drawWalls(){
                // Draw the top and bottom walls
                this.ctx.fillStyle = "rgb(196, 0, 121)";
                this.ctx.fillRect(0, 0, this.canvas.width, 10);
                this.ctx.fillRect(0, this.canvas.height - 10, this.canvas.width, 10);

            }


            // draw the scoreboard 
            drawScore(){
                // make a score board on the top left corner of the screen in the canvas
                this.ctx.font = "30px Arial";
                this.ctx.fillStyle = "black";
                this.ctx.fillText("Score: " + this.score, 10, 30);

            }
            // update game logic
            update(){
            
                // Move the ball
                this.ballX += this.ballSpeedX;
                this.ballY += this.ballSpeedY;

                this.drawScore();

                // Check collision with top and bottom walls
                if (this.ballY < 0 || this.ballY > this.canvas.height) {
                    this.ballSpeedY = -this.ballSpeedY;
                }

                // check collision with left and right walls
                if (this.ballX < 0 || this.ballX > this.canvas.width) {
                    this.ballSpeedX = 0;
                    this.ballSpeedY = 0;
                    this.gameEnded = true;
                    return;
                }

                // Check collision with left paddle
                if (this.ballX < this.paddleWidth && this.ballY > this.leftPaddleY && this.ballY < this.leftPaddleY + this.paddleHeight) {
                    this.ballSpeedX = -(this.ballSpeedX - .5); // Reflect the ball's horizontal motion
                    this.score++;
                   
                }

                // Check collision with right paddle
                if (
                    this.ballX > this.canvas.width - this.paddleWidth && // Right edge of ball
                    this.ballY > this.rightPaddleY && this.ballY < this.rightPaddleY + this.paddleHeight // Within paddle's vertical range
                ) {
                    this.ballSpeedX = -(this.ballSpeedX + .5); // Reflect the ball's horizontal motion
                    this.score++;
                }

                // clear canvas
                this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);

                // Draw paddles
                this.ctx.fillStyle = "black";
                this.ctx.fillRect(0, this.leftPaddleY, this.paddleWidth, this.paddleHeight);
                this.ctx.fillRect(this.canvas.width - this.paddleWidth, this.rightPaddleY, this.paddleWidth, this.paddleHeight);

                // Draw the ball
                this.ctx.beginPath();
                this.ctx.arc(this.ballX, this.ballY, 10, 0, Math.PI * 2);
                this.ctx.fillStyle = "black";
                this.ctx.fill();

                // Draw the walls
                this.drawWalls();
            }


        }

        // Wait for the DOM to be loaded
        document.addEventListener("DOMContentLoaded", () => {
            // Get the canvas element
            const canvas = document.getElementById("pongCanvas");
            const ctx = canvas.getContext("2d");

            let currentGame = null;

            function clearCanvas(){
                ctx.clearRect(0, 0, canvas.width, canvas.height);
            }

            // function to start new game
            function startGame(selectedGame){
                // clear cavnas before starting a new game
                clearCanvas();

                // init the selected game
                currentGame = selectedGame;
                // start the game loop
                update();
            }

            // main update loop
            function update(){
                if(currentGame){
                    currentGame.update();
                    requestAnimationFrame(update);
                }
            }
            function startBreakout(gameInstance){
                clearCanvas();
                gameInstance.gameLoop();
            }

            // Game selection UI
            const gameButtons = document.querySelectorAll(".game-button");
            gameButtons.forEach((button)=> {
                button.addEventListener("click", () => {
                     
                    const selectedGame = button.getAttribute("data-game");
                    if(selectedGame === "pong"){
                       
                        window[selectedGame] = new PongGame(canvas);
                        startGame(window[selectedGame]);
                    }
                    if(selectedGame === "breakout"){
                        window[selectedGame] = new BreakoutGame(canvas);
                        startBreakout(window[selectedGame]);
                    }
                   
                });

            });
           
        });
    </script>
    <style>
        #pongCanvas {
            font-family: monospace; /* Use the default monospace font for a pixelated effect */
        }
    </style>
   

</body>
</html>
